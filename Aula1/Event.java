package Aula1;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents an event.
 */
public class Event {
    private int ticketLimit;
    private String eventName;
    private List<Ticket> tickets;
    private double revenueRate = 0.1;
    private double revenueRateResold = 0.15;

    /**
     * Constructs an Event object.
     * 
     * @param eventName    the name of the event
     * @param ticketLimit  the maximum number of tickets that can be sold for the event
     */
    public Event(String eventName, int ticketLimit) {
        this.eventName = eventName;
        this.tickets = new ArrayList<>();
        this.ticketLimit = ticketLimit;
    }

    /**
     * Constructs an Event object with custom revenue rates.
     * 
     * @param eventName          the name of the event
     * @param ticketLimit        the maximum number of tickets that can be sold for the event
     * @param revenueRate        the revenue rate for tickets sold for the event
     * @param revenueRateResold  the revenue rate for resold tickets for the event
     */
    public Event(String eventName, int ticketLimit, double revenueRate, double revenueRateResold) {
        this.eventName = eventName;
        this.tickets = new ArrayList<>();
        this.ticketLimit = ticketLimit;
        this.revenueRate = revenueRate;
        this.revenueRateResold = revenueRateResold;
    }

    public static int getSoldTickets(){
        return Ticket.getSoldTickets();
    }

    /**
     * Sells a ticket for the event.
     * 
     * @param customerName  the name of the customer
     * @param price         the price of the ticket
     * @throws IllegalArgumentException if the ticket limit has been reached for the event
     */
    public void sellTicket(String customerName, double price) {
        if (isTicketLimitReached()) {
            throw new IllegalArgumentException("Ticket limit reached for event: " + eventName);
        }
        Ticket ticket = new Ticket(eventName, customerName, price);
        tickets.add(ticket);
    }

    /**
     * Checks if the ticket limit has been reached for the event.
     * 
     * @return true if the ticket limit has been reached, false otherwise
     */
    private boolean isTicketLimitReached() {
        return tickets.size() >= ticketLimit;
    }

    /**
     * Finds a ticket by customer name.
     * 
     * @param customerName  the name of the customer
     * @return the ticket with the specified customer name, or null if not found
     */
    private Ticket findTicketByCustomerName(String customerName) {
        for (Ticket ticket : tickets) {
            if (ticket.getCustomerName().equals(customerName)) {
                return ticket;
            }
        }
        return null;
    }

    /**
     * Returns the list of tickets for the event.
     * 
     * @return the list of tickets for the event
     */
    public List<Ticket> getTickets() {
        return tickets;
    }

    /**
     * Calculates the total revenue generated by the event.
     * 
     * @return the total revenue generated by the event
     */
    public double calculateRevenue() {
        double revenue = 0;
        for (Ticket ticket : tickets) {
            revenue += ticket.getPrice() * revenueRate  + (ticket.isResold() == true ? ticket.getPrice() * revenueRateResold : 0);
        }
        return revenue;
    }

    /**
     * Resells a ticket for the event.
     * 
     * @param originalCustomerName  the name of the original customer
     * @param newCustomerName       the name of the new customer
     * @param resalePrice           the resale price of the ticket
     * @throws IllegalArgumentException if the original ticket is not found or if it is a resold ticket
     */
    public void resellTicket(String originalCustomerName, String newCustomerName, double resalePrice) {
        Ticket originalTicket = findTicketByCustomerName(originalCustomerName);
        if (originalTicket == null) {
            throw new IllegalArgumentException("Ticket not found for customer: " + originalCustomerName);
        }
        ResellTicket resellTicket = new ResellTicket(originalTicket, newCustomerName, resalePrice);
        tickets.remove(originalTicket);
        tickets.add(resellTicket);
    }

    public void printTickets() {
        for (Ticket ticket : tickets) {
            System.out.println(ticket.getCustomerName() + " bought a ticket for " + ticket.getEventName() + " for " + ticket.getPrice());
        }
    }
}

